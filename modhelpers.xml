<Layer Type="Quad" ModCommand="%xero(function(self)
	---------------------------------------------------------
	---------MODHELPER.XML DOCUMENTATION---------------------
	---------------------------------------------------------
	
	--function perframe(start_beat, end_beat, f)
		--return true if the current beat is between 'beat' and 'endBeat'
		
	--function message(beat, msg, p)
		--insert something into func.
		--msg can also be a function. If string, a message gets broadcast at that beat
		--if 'p' is true, message will run even if editor starts at any beat past it
		--if 'p' is a number, messege will run even if editor starts 'p' beats past it
		
	--function wiggle(beat, length, step, ease_func, percent, mod, pn)
		--alternates a mod's value between negative and postive before resetting to 0
		
	--function wiggle2lua(notedata, ease_func, percent, mod, pn)
		--similar to wiggle, but used for chart2lua
		
	--function wiggle0(beat, length, step, ease_func, percent, mod, pn)
		--alternates a mod's value between 'percent' and 0 before resetting
		
	--function wiggle2lua0(notedata, ease_func, percent, mod, pn)
		--similar to wiggle0, but used for chart2lua
	
		--function switcheroo(beat, length, ease, which, pn)
			--adds a column swap at the desired beat
			--[[
				'normal', 'ldur', 'reset', -- resets the column swaps
				'flip', 'rudl', -- represents 100% flip
				'invert', 'dlru', -- represents 100% invert
				'ludr', 'rdul', 'drlu', 'ulrd', 'urld', etc. -- other possible column swaps
			]]
	
	--function modulo(a, b)
		--returns the remainder when a is divided by b, works properly with negatives unlike math.mod
		
	--function drivendrop(beat, length, step, speedmod, pn)
		--an instant function used to do drivendrop
		
	---------------------------------------------------------
	--------END DOCUMENTATION--------------------------------
	---------------------------------------------------------
	
	---------------------------------------------------------
	----------------------DON'T TOUCH IT KIDDO---------------
	---------------------------------------------------------
	
	function modulo(a, b)
		return a - math.floor(a / b) * b
	end
	
	function perframe(start_beat, end_beat, f)
		func{start_beat, end_beat, f, mode = 'end'}
	end
	
	function message(beat, msg, p)
		p = p or 1
		func{beat, function(beat)
			if (p == true) or p < beat then
				if type(msg) == 'string' then
					MESSAGEMAN:Broadcast(msg)
				else
					msg()
				end
			end
		end}
	end
	
	local switcheroos = {}
	
	local function permute(tab, callback, temp, temp2, temp3)
		local j = temp3 or 1
		local n = temp2 or table.getn(tab)
		temp = temp or {}
		for i = 0, n do
			if tab[i] then
				temp[j] = tab[i]
				tab[i] = nil
				if j == n then
					callback(temp)
				else
					permute(tab, callback, temp, n, j + 1)
				end
				tab[i] = temp[j]
			end
		end
	end
	
	local lookup = {l = 1, d = 2, u = 3, r = 4}
	
	permute({'l', 'd', 'u', 'r'}, function(t)
		local entry = {}
		for i, v in ipairs(t) do
			local offset = i - lookup[v]
			entry[lookup[v]] = offset * 100
		end
		switcheroos[table.concat(t)] = entry
	end)
	
	switcheroos.normal = switcheroos.ldur
	switcheroos.reset = switcheroos.ldur
	switcheroos.invert = switcheroos.dlru
	switcheroos.flip = switcheroos.rudl
	
	function switcheroo(beat, length, ease, which, pn)
		which = switcheroos[which]
		if which then
			ease_to{beat, length, ease, which[1], 'movex0', which[2], 'movex1', which[3], 'movex2', which[4], 'movex3', pn = pn, mode = 'len'}
		else
			error('invalid column swap', 2)
		end
	end
	
	function wiggle(beat, length, step, ease_func, percent, mod, pn)
		if length > step then
			local val = -1
			for i = beat, beat + length - step, step do
				if i == beat then
					ease {i, step, ease_func, percent, mod, pn = pn, mode = 'len'}
				elseif i > beat + length - 2 * step then
					ease {i, step, ease_func, percent * val, mod, pn = pn, mode = 'len'}
				else
					ease {i, step, ease_func, percent * 2 * val, mod, pn = pn, mode = 'len'}
					val = -val
				end
			end
		end
	end
	
	function wiggle2lua(notedata, ease_func, percent, mod, pn)
		local val = -1
		local len = table.getn(notedata)
		for i = 1, len - 1 do
			local s = notedata[i]
			local e = notedata[i + 1]
			s = (type(s) == 'table') and s[1] or s
			e = (type(e) == 'table') and e[1] or e
			if i == 1 then
				ease {s, e, ease_func, percent, mod, pn = pn, mode = 'end'}
			elseif i == len - 1 then
				ease {s, e, ease_func, percent * val, mod, pn = pn, mode = 'end'}
			else
				ease {s, e, ease_func, percent * 2 * val, mod, pn = pn, mode = 'end'}
				val = -val
			end
		end
	end
	
	function wiggle0(beat, length, step, ease_func, percent, mod, pn)
		if length > step then
			local val = 1
			for i = beat, beat + length - step, step do
				ease {i, step, ease_func, percent *  val, mod, pn = pn, mode = 'len'}
				val = -val
			end
		end
	end
	
	function wiggle2lua0(notedata, ease_func, percent, mod, pn)
		local val = 1
		local len = table.getn(notedata)
		for i = 1, len - 1 do
			local s = notedata[i]
			local e = notedata[i + 1]
			s = (type(s) == 'table') and s[1] or s
			e = (type(e) == 'table') and e[1] or e
			ease {s, e, ease_func, percent *  val, mod, pn = pn, mode = 'end'}
			val = -val
		end
	end
	
	function drivendrop(beat, length, step, speedmod, pn)
		for i = beat, beat + length - step, step do
			ease
			{i, step, linear, speedmod * step * 100, 'centered2', pn = pn, mode = 'len'}
			{i + step, 0, instant, -speedmod * step * 100, 'centered2', pn = pn, mode = 'len'}
		end
	end
	
	---------------------------------------------------------
	----------------------END DON'T TOUCH IT KIDDO-----------
	---------------------------------------------------------
	
end)"/>